Index: DVDSubtitleParserSami.cpp
===================================================================
--- DVDSubtitleParserSami.cpp	(revision 20059)
+++ DVDSubtitleParserSami.cpp	(working copy)
@@ -1,24 +1,24 @@
 /*
- *      Copyright (C) 2005-2008 Team XBMC
- *      http://www.xbmc.org
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with XBMC; see the file COPYING.  If not, write to
- *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
- *  http://www.gnu.org/copyleft/gpl.html
- *
- */
- 
+*      Copyright (C) 2005-2008 Team XBMC
+*      http://www.xbmc.org
+*
+*  This Program is free software; you can redistribute it and/or modify
+*  it under the terms of the GNU General Public License as published by
+*  the Free Software Foundation; either version 2, or (at your option)
+*  any later version.
+*
+*  This Program is distributed in the hope that it will be useful,
+*  but WITHOUT ANY WARRANTY; without even the implied warranty of
+*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+*  GNU General Public License for more details.
+*
+*  You should have received a copy of the GNU General Public License
+*  along with XBMC; see the file COPYING.  If not, write to
+*  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+*  http://www.gnu.org/copyleft/gpl.html
+*
+*/
+
 #include "stdafx.h"
 #include "DVDSubtitleParserSami.h"
 #include "DVDCodecs/Overlay/DVDOverlayText.h"
@@ -29,90 +29,379 @@
 using namespace std;
 
 CDVDSubtitleParserSami::CDVDSubtitleParserSami(CDVDSubtitleStream* pStream, const string& filename)
-    : CDVDSubtitleParserText(pStream, filename)
+: CDVDSubtitleParserText(pStream, filename)
 {
 
 }
 
 CDVDSubtitleParserSami::~CDVDSubtitleParserSami()
 {
-  Dispose();
+	Dispose();
 }
 
 bool CDVDSubtitleParserSami::Open(CDVDStreamInfo &hints)
 {
-  if (!CDVDSubtitleParserText::Open())
-    return false;
+	__int64 currentTag;
+	int pos;
+	int pos2;
+	double startTime;
 
-  char line[1024];
+	char line[1024];
 
-  CRegExp reg(true);
-  if (!reg.RegComp("<SYNC START=([0-9]+)>"))
-    return false;
+	CStdStringW strUTF16;
+	CStdStringA strUTF8;
 
-  CRegExp tags(true);
-  if (!tags.RegComp("<[^>]*>"))
-    return false;
+	startTime = -1;
+	currentTag = 0;
 
-  CDVDOverlayText* pOverlay = NULL;
-  while (m_pStream->ReadLine(line, sizeof(line)))
-  {
-    int pos = reg.RegFind(line);
-    const char* text = line;
-    if (pos > -1)
-    {
-      CStdString start = reg.GetMatch(1);
-      if(pOverlay)
-      {
-        AddText(tags, pOverlay, text, pos);
-        pOverlay->iPTSStopTime  = int64_t(atoi(start.c_str()))*DVD_TIME_BASE/1000;
-        pOverlay->Release();
-      }
+	CRegExp languages(true);
+	if (!languages.RegComp("^\\s*\\.([a-zA-Z]+)\\s+\\{[^}]*\\}"))
+		return false;
 
-      pOverlay = new CDVDOverlayText();
-      pOverlay->Acquire(); // increase ref count with one so that we can hold a handle to this overlay
+	CRegExp tags(true);
+	if (!tags.RegComp("(<[^>]*>|-->|<!--)"))
+		return false;
 
-      pOverlay->iPTSStartTime = int64_t(atoi(start.c_str()))*DVD_TIME_BASE/1000; 
-      pOverlay->iPTSStopTime  = DVD_NOPTS_VALUE;
-      m_collection.Add(pOverlay);
-      text += pos + reg.GetFindLen();
-    }
-    if(pOverlay)
-      AddText(tags, pOverlay, text, strlen(text));
-  }
+	CRegExp tagNames(true);
+	if (!tagNames.RegComp("^<((?:[/a-zA-Z-]+)+)"))
+		return false;
 
-  if(pOverlay)
-    pOverlay->Release();
+	CRegExp tagOptions(true);
+	if (!tagOptions.RegComp("([a-zA-Z]+)[ \t]*=[ \t]*(?:[\"'])?([^\"'> ]+)(?:[\"'])?(?:>)?"))
+		return false;
 
-  m_pStream->Close();
-  return true;
+	if (!CDVDSubtitleParserText::Open())
+		return false;
+
+	CDVDOverlayText* pOverlay = NULL;
+	while (m_pStream->ReadLine(line, sizeof(line)))
+	{
+		pos=0;
+		strUTF8.assign(line, strlen(line));
+		if (check_style(currentTag))
+		{
+			pos2=0;
+			while(line[pos2] == ' ' || line[pos2] == '\t')
+			{
+				pos2++;
+			}
+
+			if (line[pos2] == '.')
+			{
+				// language check
+				CStdString languageName;
+				pos2 = languages.RegFind(line);
+				languageName = languages.GetMatch(1);
+				vecLanguages.push_back(languageName.ToLower());
+
+				continue;
+			}
+		}
+
+		while ((pos=tags.RegFind(strUTF8.c_str(), pos)) > -1)
+		{
+			// Parse Tags
+			CStdString fullTag = tags.GetMatch(0);
+
+			pos2=0;
+			if (fullTag == "<!--")
+			{
+				set_comment(currentTag);
+				strUTF8.erase(pos, fullTag.length());
+			}
+			else if (fullTag == "-->")
+			{
+				unset_comment(currentTag);
+				strUTF8.erase(pos, fullTag.length());
+			}
+			else if (tagNames.RegFind(fullTag.c_str()) > -1)
+			{
+				CStdString tagName = tagNames.GetMatch(1);
+
+				tagName.ToLower();
+				pos2=0;
+
+				if (tagName.Find("sami") != -1)
+				{
+					if (tagName[0] == '/')
+					{
+						unset_sami(currentTag);
+					}
+					else
+					{
+						set_sami(currentTag);
+					}
+					strUTF8.erase(pos, fullTag.length());
+				}
+				else if (tagName.Find("head") != -1)
+				{
+					if (tagName[0] == '/')
+					{
+						unset_head(currentTag);
+					}
+					else
+					{
+						set_head(currentTag);
+					}
+					strUTF8.erase(pos, fullTag.length());
+				}
+				else if (tagName == "style" || tagName == "/style")
+				{
+					if (tagName[0] == '/')
+					{
+						unset_style(currentTag);
+					}
+					else
+					{
+						while ((pos2 = tagOptions.RegFind(fullTag.c_str(), pos2)) > -1)
+						{
+							CStdString tagOptionName = tagOptions.GetMatch(1);
+							CStdString tagOptionValue = tagOptions.GetMatch(2);
+							pos2 += tagOptionName.length() + tagOptionValue.length();
+							tagOptionName.ToLower();
+							if (tagOptionName == "type")
+							{
+								tagOptionValue.ToLower();
+								if (tagOptionValue == "text/css")
+								{
+									set_style(currentTag);
+								}
+							}
+							tagOptionName.clear();
+							tagOptionValue.clear();
+						}
+					}
+					strUTF8.erase(pos, fullTag.length());
+				}
+				else if (tagName.Find("body") != -1)
+				{
+					if (tagName[0] == '/')
+					{
+						unset_body(currentTag);
+					}
+					else
+					{
+						set_body(currentTag);
+					}
+					strUTF8.erase(pos, fullTag.length());
+				}
+				else if (tagName == "b" || tagName == "/b")
+				{
+					if (tagName[0] == '/')
+					{
+						unset_b(currentTag);
+						strUTF8.erase(pos, fullTag.length());
+						strUTF8.insert(pos, "[/B]");
+						pos += 4;
+					}
+					else
+					{
+						set_b(currentTag);
+						strUTF8.erase(pos, fullTag.length());
+						strUTF8.insert(pos, "[B]");
+						pos += 3;
+					}
+				}
+				else if (tagName == "font" || tagName == "/font")
+				{
+					if (tagName[0] == '/' && check_font(currentTag))
+					{
+						unset_font(currentTag);
+						strUTF8.erase(pos, fullTag.length());
+						strUTF8.insert(pos, "[/COLOR]");
+						pos += 8;
+					}
+					else
+					{
+						strUTF8.erase(pos, fullTag.length());
+						while ((pos2 = tagOptions.RegFind(fullTag.c_str(), pos2)) > -1)
+						{
+							CStdString tagOptionName = tagOptions.GetMatch(1);
+							CStdString tagOptionValue = tagOptions.GetMatch(2);
+							pos2 += tagOptionName.length() + tagOptionValue.length();
+							tagOptionName.ToLower();
+							if (tagOptionName == "color")
+							{
+								set_font(currentTag);
+								CStdString tempColorTag = "[COLOR ";
+								tempColorTag += GetColorCode(tagOptionValue);
+								tempColorTag += "]";
+								strUTF8.insert(pos, tempColorTag.ToUpper());
+								pos += tempColorTag.length();
+							}
+							tagOptionName.clear();
+							tagOptionValue.clear();
+						}
+					}
+				}
+				else if (tagName == "i" || tagName == "/i")
+				{
+					if (tagName[0] == '/')
+					{
+						unset_i(currentTag);
+						strUTF8.erase(pos, fullTag.length());
+						strUTF8.insert(pos, "[/I]");
+						pos += 4;
+					}
+					else
+					{
+						set_i(currentTag);
+						strUTF8.erase(pos, fullTag.length());
+						strUTF8.insert(pos, "[I]");
+						pos += 3;
+					}
+				}
+				else if (tagName == "p")
+				{
+					while ((pos2 = tagOptions.RegFind(fullTag.c_str(), pos2)) > -1)
+					{
+						CStdString tagOptionName = tagOptions.GetMatch(1);
+						CStdString tagOptionValue = tagOptions.GetMatch(2);
+						pos2 += tagOptionName.length() + tagOptionValue.length();
+
+						tagOptionName.ToLower();
+						if (tagOptionName == "class")
+						{
+							tagOptionValue.ToLower();
+							/*
+							if (tagOptionValue == "krcc")
+							{
+							// Language Select
+							}
+							*/
+						}
+						tagOptionName.clear();
+						tagOptionValue.clear();
+					}
+					strUTF8.erase(pos, fullTag.length());
+				}
+				else if (tagName == "sync")
+				{
+					while ((pos2 = tagOptions.RegFind(fullTag.c_str(), pos2)) > -1)
+					{
+						CStdString tagOptionName = tagOptions.GetMatch(1);
+						CStdString tagOptionValue = tagOptions.GetMatch(2);
+						tagOptionName.ToLower();
+						pos2 += tagOptionName.length() + tagOptionValue.length();
+						if (tagOptionName == "start")
+						{
+							startTime = (double)atoi(tagOptionValue.c_str()) * (DVD_TIME_BASE / 1000);
+						}
+						tagOptionName.clear();
+						tagOptionValue.clear();
+					}
+					strUTF8.erase(pos, fullTag.length());
+				}
+				else if (tagName == "br")
+				{
+					strUTF8.erase(pos, fullTag.length());
+					strUTF8.insert(pos, "\n");
+					pos += 1;
+				}
+				else
+				{
+					strUTF8.erase(pos, fullTag.length());
+				}
+				tagName.clear();
+			}
+			else
+			{
+				strUTF8.erase(pos, fullTag.length());
+			}
+			fullTag.clear();
+		}
+
+		if (check_sami(currentTag) && check_body(currentTag) && !check_comment(currentTag) && startTime != -1)
+		{
+			if (pOverlay && pOverlay->iPTSStartTime != DVD_NOPTS_VALUE && startTime != pOverlay->iPTSStartTime)
+			{
+				pOverlay->iPTSStopTime  = startTime;
+				if (check_font(currentTag))
+				{
+					pOverlay->AddElement(new CDVDOverlayText::CElementText("[/COLOR]"));
+					unset_font(currentTag);
+				}
+				if (check_b(currentTag))
+				{
+					pOverlay->AddElement(new CDVDOverlayText::CElementText("[/B]"));
+					unset_b(currentTag);
+				}
+				if (check_i(currentTag))
+				{
+					pOverlay->AddElement(new CDVDOverlayText::CElementText("[/I]"));
+					unset_i(currentTag);
+				}
+				m_collection.Add(pOverlay);
+
+				pOverlay = new CDVDOverlayText();
+				pOverlay->Acquire(); // increase ref count with one so that we can hold a handle to this overlay
+
+				pOverlay->iPTSStartTime = startTime;
+				pOverlay->iPTSStopTime  = DVD_NOPTS_VALUE;
+			}
+			else if (pOverlay == NULL)
+			{
+				pOverlay = new CDVDOverlayText();
+				pOverlay->Acquire(); // increase ref count with one so that we can hold a handle to this overlay
+
+				pOverlay->iPTSStartTime = startTime;
+				pOverlay->iPTSStopTime  = DVD_NOPTS_VALUE;
+			}
+			//strUTF8.assign(text, strlen(text));
+
+			g_charsetConverter.subtitleCharsetToW(strUTF8, strUTF16);
+			g_charsetConverter.wToUTF8(strUTF16, strUTF8);
+			strUTF8.Trim();
+			if (strUTF8.IsEmpty())
+				continue;
+			// add a new text element to our container
+			pOverlay->AddElement(new CDVDOverlayText::CElementText(strUTF8.c_str()));
+
+			strUTF8.clear();
+			strUTF16.clear();
+		}
+	}
+
+
+	m_pStream->Close();
+	return true;
 }
 
-void CDVDSubtitleParserSami::AddText(CRegExp& tags, CDVDOverlayText* pOverlay, const char* data, int len)
+CStdString CDVDSubtitleParserSami::GetColorCode(CStdString color_text)
 {
-  CStdStringW strUTF16;
-  CStdStringA strUTF8;
-  strUTF8.assign(data, len);
-  strUTF8.Replace("\n", "");
+	const char * temp;
+	int i;
 
-  int pos = 0;
-  while( (pos = tags.RegFind(strUTF8.c_str(), pos)) >= 0 )
-  {
-    CStdString tag = tags.GetMatch(0);
-    if(tag == "<i>"
-    || tag == "</i>")
-    {
-      pos += tag.length();
-      continue;
-    }
-    strUTF8.erase(pos, tag.length());
-  }
+	i = 0;
 
-  g_charsetConverter.subtitleCharsetToW(strUTF8, strUTF16);
-  g_charsetConverter.wToUTF8(strUTF16, strUTF8);
-  if (strUTF8.IsEmpty())
-    return;
-  // add a new text element to our container
-  pOverlay->AddElement(new CDVDOverlayText::CElementText(strUTF8.c_str()));
+	if (color_text[0] == '#')
+	{
+		color_text.erase(0, 1);
+		return "FF"+color_text;
+	}
+	else
+	{
+		color_text.ToLower();
+		int left = 0;
+		int right = sizeof(color_table)/sizeof(struct color_table_type);
+		int comp;
+		temp = color_text.c_str();
+		while (left <= right)
+		{
+			i = (left + right) / 2;
+			comp = strcmp(color_table[i].color_string, temp);
+			switch(comp)
+			{
+			case -1:
+				left = i + 1;
+				break;
+			case 0: 
+				return color_table[i].color_value;
+			case 1: 
+				right = i - 1;
+				break;
+			}
+		}
+	}
+	return "";
 }
-
Index: DVDSubtitleParserSami.h
===================================================================
--- DVDSubtitleParserSami.h	(revision 20059)
+++ DVDSubtitleParserSami.h	(working copy)
@@ -23,16 +23,257 @@
 
 #include "DVDSubtitleParser.h"
 #include "DVDSubtitleLineCollection.h"
+
+#define SAMI_VERSION		1.0
+
+/* Supported Tag */
+#define SAMI_TAG_SAMI			0x00000001
+#define SAMI_TAG_HEAD			0x00000002
+#define SAMI_TAG_STYLE			0x00000004
+#define SAMI_TAG_BODY			0x00000008
+
+#define SAMI_TAG_B				0x00000010
+#define SAMI_TAG_FONT			0x00000020
+#define SAMI_TAG_I				0x00000040
+
+#define SAMI_TAG_COMMENT		0x00000080
+
+/* Not necessary checking open/close */
+#define SAMI_TAG_BR				0x00000000
+#define SAMI_TAG_P				0x00000000
+#define SAMI_TAG_SYNC			0x00000000
+
+/* Not Supported yet */
+#define SAMI_TAG_TITLE			0x00000000
+#define SAMI_TAG_BASEFONT		0x00000000
+#define SAMI_TAG_BIG			0x00000000
+#define SAMI_TAG_BLOCKQUOTE		0x00000000
+#define SAMI_TAG_CAPTION		0x00000000
+#define SAMI_TAG_CENTER			0x00000000
+#define SAMI_TAG_COL			0x00000000
+#define SAMI_TAG_COLGROUP		0x00000000
+#define SAMI_TAG_DD				0x00000000
+#define SAMI_TAG_DIV			0x00000000
+#define SAMI_TAG_DL				0x00000000
+#define SAMI_TAG_DT				0x00000000
+#define SAMI_TAG_H1				0x00000000
+#define SAMI_TAG_H2				0x00000000
+#define SAMI_TAG_H3				0x00000000
+#define SAMI_TAG_H4				0x00000000
+#define SAMI_TAG_H5				0x00000000
+#define SAMI_TAG_H6				0x00000000
+#define SAMI_TAG_HR				0x00000000
+#define SAMI_TAG_IMG			0x00000000
+#define SAMI_TAG_LI				0x00000000
+#define SAMI_TAG_OL				0x00000000
+#define SAMI_TAG_PRE			0x00000000
+#define SAMI_TAG_Q				0x00000000
+#define SAMI_TAG_S				0x00000000
+#define SAMI_TAG_SMALL			0x00000000
+#define SAMI_TAG_SPAN			0x00000000
+#define SAMI_TAG_SUP			0x00000000
+#define SAMI_TAG_TABLE			0x00000000
+#define SAMI_TAG_TBODY			0x00000000
+#define SAMI_TAG_TD				0x00000000
+#define SAMI_TAG_TFOOT			0x00000000
+#define SAMI_TAG_TH				0x00000000
+#define SAMI_TAG_THEAD			0x00000000
+#define SAMI_TAG_TR				0x00000000
+#define SAMI_TAG_TT				0x00000000
+#define SAMI_TAG_U				0x00000000
+#define SAMI_TAG_UL				0x00000000
+
+#define check_tag(a, tag)		((a & SAMI_TAG_##tag) == SAMI_TAG_##tag)
+#define check_sami(a)			((a & SAMI_TAG_SAMI) == SAMI_TAG_SAMI)
+#define check_head(a)			((a & SAMI_TAG_HEAD) == SAMI_TAG_HEAD)
+#define check_style(a)			((a & SAMI_TAG_STYLE) == SAMI_TAG_STYLE)
+#define check_body(a)			((a & SAMI_TAG_BODY) == SAMI_TAG_BODY)
+#define check_b(a)				((a & SAMI_TAG_B) == SAMI_TAG_B)
+#define check_font(a)			((a & SAMI_TAG_FONT) == SAMI_TAG_FONT)
+#define check_i(a)				((a & SAMI_TAG_I) == SAMI_TAG_I)
+#define check_comment(a)		((a & SAMI_TAG_COMMENT) == SAMI_TAG_COMMENT)
+
+#define set_tag(a, tag)			a = a | SAMI_TAG_##tag
+#define set_sami(a)				a = a | SAMI_TAG_SAMI
+#define set_head(a)				a = a | SAMI_TAG_HEAD
+#define set_style(a)			a = a | SAMI_TAG_STYLE
+#define set_body(a)				a = a | SAMI_TAG_BODY
+#define set_b(a)				a = a | SAMI_TAG_B
+#define set_font(a)				a = a | SAMI_TAG_FONT
+#define set_i(a)				a = a | SAMI_TAG_I
+#define set_comment(a)			a = a | SAMI_TAG_COMMENT
+
+#define unset_tag(a, tag)		a = a & (~SAMI_TAG_##tag)
+#define unset_sami(a)			a = a & (~SAMI_TAG_SAMI)
+#define unset_head(a)			a = a & (~SAMI_TAG_HEAD)
+#define unset_style(a)			a = a & (~SAMI_TAG_STYLE)
+#define unset_body(a)			a = a & (~SAMI_TAG_BODY)
+#define unset_b(a)				a = a & (~SAMI_TAG_B)
+#define unset_font(a)			a = a & (~SAMI_TAG_FONT)
+#define unset_i(a)				a = a & (~SAMI_TAG_I)
+#define unset_comment(a)		a = a & (~SAMI_TAG_COMMENT)
+
 class CDVDOverlayText;
 class CRegExp;
 
+
+const struct color_table_type
+{
+	char color_string[33];
+	char color_value[9];
+} color_table[] = {
+	{"aliceblue", "fff0f8ff"}, 
+	{"antiquewhite", "fffaebd7"}, 
+	{"aqua", "ff00ffff"}, 
+	{"aquamarine", "ff7fffd4"}, 
+	{"azure", "fff0ffff"}, 
+	{"beige", "fff5f5dc"}, 
+	{"bisque", "ffffe4c4"}, 
+	{"black", "ff000000"}, 
+	{"blanchedalmond", "ffffebcd"}, 
+	{"blue", "ff0000ff"}, 
+	{"blueviolet", "ff8a2be2"}, 
+	{"brown", "ffa52a2a"}, 
+	{"burlywood", "ffdeb887"}, 
+	{"cadetblue", "ff5f9ea0"}, 
+	{"chartreuse", "ff7fff00"}, 
+	{"chocolate", "ffd2691e"}, 
+	{"coral", "ffff7f50"}, 
+	{"cornflowerblue", "ff6495ed"}, 
+	{"cornsilk", "fffff8dc"}, 
+	{"crimson", "ffdc143c"}, 
+	{"cyan", "ff00ffff"}, 
+	{"darkblue", "ff00008b"}, 
+	{"darkcyan", "ff008b8b"}, 
+	{"darkgoldenrod", "ffb8860b"}, 
+	{"darkgray", "ffa9a9a9"}, 
+	{"darkgreen", "ff006400"}, 
+	{"darkkhaki", "ffbdb76b"}, 
+	{"darkmagenta", "ff8b008b"}, 
+	{"darkolivegreen", "ff556b2f"}, 
+	{"darkorange", "ffff8c00"}, 
+	{"darkorchid", "ff9932cc"}, 
+	{"darkred", "ff8b0000"}, 
+	{"darksalmon", "ffe9967a"}, 
+	{"darkseagreen", "ff8fbc8f"}, 
+	{"darkslateblue", "ff483d8b"}, 
+	{"darkslategray", "ff2f4f4f"}, 
+	{"darkturquoise", "ff00ced1"}, 
+	{"darkviolet", "ff9400d3"}, 
+	{"deeppink", "ffff1493"}, 
+	{"deepskyblue", "ff00bfff"}, 
+	{"dimgray", "ff696969"}, 
+	{"dodgerblue", "ff1e90ff"}, 
+	{"firebrick", "ffb22222"}, 
+	{"floralwhite", "fffffaf0"}, 
+	{"forestgreen", "ff228b22"}, 
+	{"fuchsia", "ffff00ff"}, 
+	{"gainsboro", "ffdcdcdc"}, 
+	{"ghostwhite", "fff8f8ff"}, 
+	{"gold", "ffffd700"}, 
+	{"goldenrod", "ffdaa520"}, 
+	{"gray", "ff808080"}, 
+	{"green", "ff008000"}, 
+	{"greenyellow", "ffadff2f"}, 
+	{"honeydew", "fff0fff0"}, 
+	{"hotpink", "ffff69b4"}, 
+	{"indianred ", "ffcd5c5c"}, 
+	{"indigo  ", "ff4b0082"}, 
+	{"ivory", "fffffff0"}, 
+	{"khaki", "fff0e68c"}, 
+	{"lavender", "ffe6e6fa"}, 
+	{"lavenderblush", "fffff0f5"}, 
+	{"lawngreen", "ff7cfc00"}, 
+	{"lemonchiffon", "fffffacd"}, 
+	{"lightblue", "ffadd8e6"}, 
+	{"lightcoral", "fff08080"}, 
+	{"lightcyan", "ffe0ffff"}, 
+	{"lightgoldenrodyellow", "fffafad2"}, 
+	{"lightgrey", "ffd3d3d3"}, 
+	{"lightgreen", "ff90ee90"}, 
+	{"lightpink", "ffffb6c1"}, 
+	{"lightsalmon", "ffffa07a"}, 
+	{"lightseagreen", "ff20b2aa"}, 
+	{"lightskyblue", "ff87cefa"}, 
+	{"lightslategray", "ff778899"}, 
+	{"lightsteelblue", "ffb0c4de"}, 
+	{"lightyellow", "ffffffe0"}, 
+	{"lime", "ff00ff00"}, 
+	{"limegreen", "ff32cd32"}, 
+	{"linen", "fffaf0e6"}, 
+	{"magenta", "ffff00ff"}, 
+	{"maroon", "ff800000"}, 
+	{"mediumaquamarine", "ff66cdaa"}, 
+	{"mediumblue", "ff0000cd"}, 
+	{"mediumorchid", "ffba55d3"}, 
+	{"mediumpurple", "ff9370d8"}, 
+	{"mediumseagreen", "ff3cb371"}, 
+	{"mediumslateblue", "ff7b68ee"}, 
+	{"mediumspringgreen", "ff00fa9a"}, 
+	{"mediumturquoise", "ff48d1cc"}, 
+	{"mediumvioletred", "ffc71585"}, 
+	{"midnightblue", "ff191970"}, 
+	{"mintcream", "fff5fffa"}, 
+	{"mistyrose", "ffffe4e1"}, 
+	{"moccasin", "ffffe4b5"}, 
+	{"navajowhite", "ffffdead"}, 
+	{"navy", "ff000080"}, 
+	{"oldlace", "fffdf5e6"}, 
+	{"olive", "ff808000"}, 
+	{"olivedrab", "ff6b8e23"}, 
+	{"orange", "ffffa500"}, 
+	{"orangered", "ffff4500"}, 
+	{"orchid", "ffda70d6"}, 
+	{"palegoldenrod", "ffeee8aa"}, 
+	{"palegreen", "ff98fb98"}, 
+	{"paleturquoise", "ffafeeee"}, 
+	{"palevioletred", "ffd87093"}, 
+	{"papayawhip", "ffffefd5"}, 
+	{"peachpuff", "ffffdab9"}, 
+	{"peru", "ffcd853f"}, 
+	{"pink", "ffffc0cb"}, 
+	{"plum", "ffdda0dd"}, 
+	{"powderblue", "ffb0e0e6"}, 
+	{"purple", "ff800080"}, 
+	{"red", "ffff0000"}, 
+	{"rosybrown", "ffbc8f8f"}, 
+	{"royalblue", "ff4169e1"}, 
+	{"saddlebrown", "ff8b4513"}, 
+	{"salmon", "fffa8072"}, 
+	{"sandybrown", "fff4a460"}, 
+	{"seagreen", "ff2e8b57"}, 
+	{"seashell", "fffff5ee"}, 
+	{"sienna", "ffa0522d"}, 
+	{"silver", "ffc0c0c0"}, 
+	{"skyblue", "ff87ceeb"}, 
+	{"slateblue", "ff6a5acd"}, 
+	{"slategray", "ff708090"}, 
+	{"snow", "fffffafa"}, 
+	{"springgreen", "ff00ff7f"}, 
+	{"steelblue", "ff4682b4"}, 
+	{"tan", "ffd2b48c"}, 
+	{"teal", "ff008080"}, 
+	{"thistle", "ffd8bfd8"}, 
+	{"tomato", "ffff6347"}, 
+	{"turquoise", "ff40e0d0"}, 
+	{"violet", "ffee82ee"}, 
+	{"wheat", "fff5deb3"}, 
+	{"white", "ffffffff"}, 
+	{"whitesmoke", "fff5f5f5"}, 
+	{"yellow", "ffffff00"}, 
+	{"yellowgreen", "ff9acd32"},
+	{"", ""},
+};
+
 class CDVDSubtitleParserSami : public CDVDSubtitleParserText
 {
 public:
   CDVDSubtitleParserSami(CDVDSubtitleStream* pStream, const std::string& strFile);
   virtual ~CDVDSubtitleParserSami();
   virtual bool Open(CDVDStreamInfo &hints);
+  std::vector<CStdString> vecLanguages;
 
 private:
   void AddText(CRegExp& tags, CDVDOverlayText*, const char* data, int len);
+  CStdString GetColorCode(CStdString color_text);
 };
